<instruction> <parameters in code> (<parameters on stack>)
Halt - stop the vm execution
Goto x - change program counter to value of x 
Sweep - Force the VM to perform making and sweeping

Call x y z - Call subroutine at location x with y number of arguments of size z
Return x y - Return x number of arguments to the calling subroutine of size y
LoadDll x - Load dll of path x
LoadDllFunc x y - Load function of name y from dll at index x 
FreeDll x - Free dll at index x
CallDllFunc

Push1 x y - Push 1 byte of y as data type x 
Push2 x y - Push 2 bytes of y as data type x 
Push4 x y - Push 4 bytes of y as data type x 
Push8 x y - Push 8 bytes of y as data type x

Pop1 - remove top item from the stack of size 1
Pop2 - remove top item from the stack of size 2
Pop4 - remove top item from the stack of size 4
Pop8 - remove top item from the stack of size 8

Store1 x - store 1 byte value at local position x
Store2 x - store 2 byte value at local position x
Store4 x - store 4 byte value at local position x
Store8 x - store 8 byte value at local position x

Load1 x y - load 1 byte value of type x from local position y
Load2 x y - load 2 byte value of type x from local position y
Load4 x y - load 4 byte value of type x from local position y
Load8 x y - load 8 byte value of type x from local position y

StorePos1 x y - store 1 byte from stack at y with offset of x
StorePos2 x y - store 2 bytes from stack at y with offset of x
StorePos4 x y - store 4 bytes from stack at y with offset of x
StorePos8 x y - store 8 bytes from stack at y with offset of x

LoadPos1 x y - Load 1 byte from y with offset of x
LoadPos2 x y - Load 2 bytes from stack at y with offset of x
LoadPos4 x y - Load 4 bytes from stack at y with offset of x
LoadPos8 x y - Load 8 bytes from stack at y with offset of x

Alloc x - allocate x bytes of data and push pointer location on stack
LoadPtr x - load data type x from pointer on the stack
StorePtr - 
FREE - 
GetPtr - 
Add (x) (y) - Add 2 values on the stack
Sub (x) (y) - Subtract 2 values on the stack
Mul (x) (y) - Multiply 2 values on the stack
Div (x) (y) - Divide 2 values on the stack
Convert - 
SmallerThan (x) (y) - Compare 2 values on the stack (returns a byte)
LargerThan (x) (y) - Compare 2 values on the stack (returns a byte)
Equal (x) (y) - Compare 2 values on the stack (returns a byte)
If (x) y - if the top stack element is 1, go to y
IfNot (x) y - if the top stack element is 0, go to y
And (x) (y) - Compare AND operation on 2 values on the stack
Or (x) (y) - Compare OR operation on 2 values on the stack
Not (x) -  Compare NOT on a value on the stack